üìù Ejercicios de SQL - Clase 2
üìå 1Ô∏è‚É£ Sentencia SELECT
Seleccionar todos los registros de la tabla alumnos.
SELECT * FROM alumnos;

Seleccionar solo los nombres y apellidos de la tabla alumnos.
SELECT nombre, apellido FROM alumnos;

Seleccionar los alumnos que sean de Argentina.
SELECT * FROM alumnos WHERE nacionalidad = 'Argentina';

Seleccionar los alumnos que tengan un email registrado (no NULL).
SELECT * FROM alumnos WHERE email IS NOT NULL;

Seleccionar los alumnos mayores de 18 a√±os.
SELECT * FROM alumnos WHERE edad >= 18;

üìå 2Ô∏è‚É£ Uso de WHERE y Operadores
Seleccionar los alumnos cuyo nombre comience con "J".
SELECT * FROM alumnos WHERE nombre LIKE 'J%';

Seleccionar los alumnos cuyo dni sea mayor a 30.000.000.
SELECT * FROM alumnos WHERE dni >= 30000000;

Seleccionar los alumnos que no tengan telefono registrado.
SELECT * FROM alumnos WHERE telefono IS  NULL;

Seleccionar los alumnos que sean de Argentina o Uruguay.
SELECT * FROM alumnos WHERE nacionalidad IN ('Argentina', 'Uruguay');

Seleccionar los alumnos que no sean de Argentina ni de Uruguay.
SELECT * FROM alumnos WHERE nacionalidad NOT IN ('Argentina','Uruguay');

üìå 3Ô∏è‚É£ Uso de ORDER BY y LIMIT
Seleccionar los alumnos y ordenarlos por apellido en orden ascendente.
SELECT * FROM alumnos ORDER BY apellido ASC;

Seleccionar los alumnos y ordenarlos por dni en orden descendente.
SELECT * FROM alumnos  ORDER BY dni DESC;

Seleccionar los 5 primeros alumnos registrados en la tabla.
SELECT * FROM alumnos ORDER BY id_alumno LIMIT 5;

Seleccionar el alumno con el dni m√°s alto.
SELECT * FROM alumnos ORDER BY dni DESC LIMIT 1;

Seleccionar los √∫ltimos 3 alumnos registrados.
SELECT * FROM alumnos ORDER BY id_alumno DESC LIMIT 3;

üìå 4Ô∏è‚É£ Uso de INSERT
Insertar un nuevo alumno en la tabla alumnos.
INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES ('Carlos', 'L√≥pez', 'carlos.lopez@gmail.com', 37845612, '1122334455', 'Chile');

Insertar dos alumnos nuevos en la misma consulta.
INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES 
('Luc√≠a', 'M√©ndez', 'lucia.mendez@mail.com', 51234567, '1133445566', 'M√©xico'),
('Andr√©s', 'Ibarra', 'andres.ibarra@mail.com', 52345678, '1144556677', 'Per√∫');

Insertar un alumno sin especificar telefono.
INSERT INTO alumnos (nombre, apellido, email, dni, nacionalidad)
VALUES ('Saul', 'Goodman', 'saulg@gmail.com', 378456132, 'M√©xico');

Insertar un alumno sin especificar email.
INSERT INTO alumnos (nombre, apellido, dni, nacionalidad)
VALUES ('Roberto', 'Lewan', 37845622, 'Polonia');

Insertar un alumno con nacionalidad diferente a Argentina.
INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES ('Elena', 'Kravchenko', 'elena.k@mail.com', 53112233, '1133998822', 'Ucrania');



üìå 5Ô∏è‚É£ Uso de UPDATE
Cambiar el email de un alumno con id_alumno = 2.
UPDATE alumnos SET email = 'emailcambiado@mail.com' WHERE id_alumno = 2;

Modificar la nacionalidad de todos los alumnos de Chile a Per√∫.
UPDATE alumnos SET nacionalidad = 'Per√∫' WHERE nacionalidad = 'Chile';

Cambiar el telefono de un alumno espec√≠fico.
UPDATE alumnos SET telefono = '5544332288' WHERE id_alumno = 8;

Modificar el apellido de un alumno cuyo nombre sea "Mar√≠a".
UPDATE alumnos SET apellido = 'Chacon' WHERE nombre = 'Maria';

Aumentar en 1 el dni de todos los alumnos que sean de Argentina.
UPDATE alumnos
SET dni = dni + 1
WHERE nacionalidad = 'Argentina';


üìå 6Ô∏è‚É£ Uso de DELETE
Eliminar un alumno cuyo id_alumno = 5.
DELETE from alumnos WHERE id_alumno = 5;

Eliminar todos los alumnos de Uruguay.
DELETE from alumnos WHERE nacionalidad = 'Uruguay';

Eliminar a los alumnos que no tengan email registrado.
DELETE from alumnos WHERE email = IS NULL;

Eliminar todos los alumnos cuyo telefono sea NULL.
DELETE from alumnos WHERE telefono = IS NULL;

Eliminar un alumno con dni menor a 30.000.000.
DELETE from alumnos WHERE dni < 30000000;

üìå 7Ô∏è‚É£ Funciones de Agregaci√≥n (COUNT, SUM, AVG, MIN, MAX)
Contar cu√°ntos alumnos hay en la tabla.
SELECT COUNT(*) AS total_alumnos FROM alumnos;

Contar cu√°ntos alumnos tienen telefono registrado.
SELECT COUNT(*) AS telefono_registrado
FROM alumnos
WHERE telefono IS NOT NULL;

Obtener el dni m√°s alto registrado en la tabla.
SELECT MAX (dni) AS dni_mas_alto FROM alumnos;

Obtener el dni m√°s bajo registrado en la tabla.
SELECT MIN (dni) AS dni_mas_bajo FROM alumnos;

Obtener la cantidad de alumnos por cada nacionalidad.
SELECT nacionalidad, COUNT(*) AS alumnos_por_nacionalidad
FROM alumnos
GROUP BY nacionalidad;


üìå 8Ô∏è‚É£ Uso de GROUP BY y HAVING
Obtener el n√∫mero de alumnos por nacionalidad.
SELECT nacionalidad, COUNT(*) AS alumnos_por_nacionalidad
FROM alumnos
GROUP BY nacionalidad;

Contar cu√°ntos alumnos tienen el mismo apellido.
SELECT apellido, COUNT(*) AS alumnos_mismo_apellido
FROM alumnos
GROUP BY apellido;

Obtener la cantidad de alumnos con email registrado y agrupar por nacionalidad.
SELECT nacionalidad, COUNT(*) AS alumnos_con_email
FROM alumnos
WHERE email IS NOT NULL
GROUP BY nacionalidad;

Seleccionar nacionalidades con m√°s de 2 alumnos registrados.
SELECT nacionalidad, COUNT(*) AS cantidad_alumnos
FROM alumnos
GROUP BY nacionalidad
HAVING COUNT(*) > 2;

Obtener el promedio de dni de los alumnos por nacionalidad.
SELECT nacionalidad, AVG(dni) AS promedio_dni
FROM alumnos
GROUP BY nacionalidad;


üìå 9Ô∏è‚É£ Uso de JOIN
Seleccionar todos los pedidos y los nombres de los alumnos que los hicieron.
SELECT alumnos.nombre, pedidos.producto 
FROM alumnos 
INNER JOIN pedidos ON alumnos.id_alumno = pedidos.id_alumno;
Hacer un LEFT JOIN entre alumnos y pedidos.
Hacer un RIGHT JOIN entre alumnos y pedidos.
Seleccionar solo los alumnos que no han hecho pedidos (LEFT JOIN con NULL).
Contar cu√°ntos pedidos ha hecho cada alumno.

üìå üîü Uso de UNION y INTERSECT
Unir los resultados de alumnos y profesores en una sola consulta.
Obtener los email que aparecen tanto en alumnos como en profesores.
Obtener los dni que aparecen en ambas tablas.
Unir los alumnos de Argentina y Uruguay en una misma consulta.
Seleccionar solo los alumnos que han hecho pedidos y unirlo con una lista de profesores que tambi√©n han hecho pedidos.




CREATE DATABASE IF NOT EXISTS coderhouse;
USE coderhouse;
CREATE TABLE IF NOT EXISTS alumnos(
	id_alumno INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(80) NOT NULL,
    email VARCHAR(150) UNIQUE DEFAULT NULL,
    dni INT UNIQUE NOT NULL,
    telefono VARCHAR(20) UNIQUE DEFAULT NULL,
    nacionalidad VARCHAR(30) DEFAULT 'Argentina'
);

ALTER TABLE alumnos ADD COLUMN fecha_inscripcion DATETIME DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE alumnos ADD COLUMN instituto VARCHAR(120);
ALTER TABLE alumnos ADD COLUMN edad INT UNSIGNED DEFAULT NULL;
ALTER TABLE alumnos MODIFY COLUMN instituto VARCHAR(60) DEFAULT 'CoderHouse';

SELECT * FROM alumnos;
INSERT INTO alumnos(nombre, apellido, dni) VALUES ("Alejandro", "Di Stefano", 22333555);
INSERT INTO alumnos(nombre, apellido, email, dni, edad) VALUES ("Diego", "Fernandez", "diego@mail.com", 23565656, 25);

INSERT INTO alumnos(
nombre, apellido, email, dni, edad, telefono
) VALUES 
("Sabrina", "Gonzalez", "sabri@mail.com", 33556565, 23, "11555666");

INSERT INTO alumnos(
nombre, apellido, email, dni, edad, telefono
) VALUES 
("Soledad", "Pastoruti", "lasole@mail.com", 40565655, 35, "1156666"),
("Enrique", "Octavo", "henry@mail.com", 6521212, 22, "2265656");

INSERT INTO alumnos(
nombre, apellido, email, dni, edad, telefono
) VALUES 
("German", "Legresti", "german@mail.com", 23455987, 35, "12345663"),
("Soledad", "Ferreyra", NULL, 326655655, 41, NULL),
("Hernan", "Garcia", "asdadasd@mail.com", 23555656, 30, "16521212");


UPDATE alumnos SET edad = 49 WHERE id_alumno = 1;

UPDATE alumnos SET email = "diegoreyes@mail.com", telefono = "22651656", apellido = "Reyes" WHERE id_alumno = 3;

UPDATE alumnos SET nacionalidad = "Uruguaya" WHERE  id_alumno > 6;
DELETE FROM alumnos WHERE id_alumno = 5;
DELETE FROM alumnos WHERE edad > 35;

-- Uso de Alias
SELECT COUNT(*) AS alumnos_uruguayos FROM alumnos WHERE nacionalidad = "Uruguaya";
SELECT COUNT(*) AS alumnos_argentinos FROM alumnos WHERE nacionalidad = "Argentina";

SELECT SUM(edad) AS suma_total_edades_alumnos_argentinos FROM alumnos WHERE nacionalidad = "Argentina";
SELECT AVG(edad) AS promedio_edades_alumnos_argentinos FROM alumnos WHERE nacionalidad = "Argentina";

SELECT
		COUNT(edad) AS cantidad_alumnos,
        SUM(edad) AS suma_edades,
        AVG(edad) AS promedio_edades
FROM alumnos 
	WHERE nacionalidad = "Argentina";
    
    
SELECT nombre, apellido, edad 
FROM alumnos
WHERE edad >= 18
ORDER BY edad DESC;

-- Consultar Mas Joven y el Mayor
SELECT
	MIN(edad) AS Joven,
    MAX(edad) AS Mayor
FROM alumnos;

SELECT nombre, apellido, email, edad, telefono, nacionalidad
FROM alumnos
ORDER BY nacionalidad ASC
LIMIT 10;



SELECT nacionalidad,
COUNT(*) AS Grupo_Nacionalidad
FROM alumnos
GROUP BY nacionalidad;

INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES ('Carlos', 'L√≥pez', 'carlos.lopez@gmail.com', 37845612, '1122334455', 'Chile');

INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES 
('Luc√≠a', 'M√©ndez', 'lucia.mendez@mail.com', 51234567, '1133445566', 'M√©xico'),
('Andr√©s', 'Ibarra', 'andres.ibarra@mail.com', 52345678, '1144556677', 'Per√∫');

-- Especificando NULL:
INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES ('Saul', 'Goodman', 'saulg@gmail.com', 378456132, NULL, 'M√©xico');

INSERT INTO alumnos (nombre, apellido, dni, nacionalidad)
VALUES ('Roberto', 'Lewan', 37845622, 'Polonia');

UPDATE alumnos
SET telefono = '112255'
WHERE id_alumno = 16;

INSERT INTO alumnos (nombre, apellido, email, dni, telefono, nacionalidad)
VALUES ('Maria', 'Del Barrio', 'mbarrio@mail.com', 542342343, '234234234', 'Bolivia');

UPDATE alumnos
SET dni = dni + 1
WHERE nacionalidad = 'Argentina';

select * from alumnos;
